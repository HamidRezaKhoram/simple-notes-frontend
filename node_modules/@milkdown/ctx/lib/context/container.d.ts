import type { Slice, SliceValue } from './slice';
export interface Container {
    readonly sliceMap: Map<symbol, SliceValue>;
    readonly getSlice: <T, N extends string = string>(slice: Slice<T, N> | N) => SliceValue<T, N>;
    readonly removeSlice: <T, N extends string = string>(slice: Slice<T, N> | N) => void;
}
export declare const createContainer: () => Container;
//# sourceMappingURL=container.d.ts.map