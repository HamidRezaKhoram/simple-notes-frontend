import type { CmdTuple, Ctx, MarkSchema, NodeSchema, RemarkPlugin } from '@milkdown/core';
import type { InputRule } from '@milkdown/prose/inputrules';
import type { MarkType, NodeType } from '@milkdown/prose/model';
import type { Plugin } from '@milkdown/prose/state';
import type { MarkViewConstructor, NodeViewConstructor } from '@milkdown/prose/view';
import type { AnySlice, CommandConfig, CommonOptions } from '../types';
import type { Pipeline } from './pipeline';
export type PluginOptions = Omit<CommonOptions<string, unknown>, 'view'> & {
    view?: (ctx: Ctx) => PluginView;
};
export declare const optionsPipeCtx: import("@milkdown/core").Slice<PluginOptions, string>;
export type UserSchema = (ctx: Ctx) => {
    node?: Record<string, NodeSchema>;
    mark?: Record<string, MarkSchema>;
};
export type PluginType = Record<string, NodeType | MarkType>;
export type PluginView = Record<string, NodeViewConstructor | MarkViewConstructor>;
type Maybe<T> = T | undefined;
export declare const injectSlicesPipeCtx: import("@milkdown/core").Slice<AnySlice[], string>;
export declare const injectSlices: Pipeline;
export declare const waitThemeReady: Pipeline;
export declare const getRemarkPluginsPipeCtx: import("@milkdown/core").Slice<Maybe<(ctx: Ctx) => RemarkPlugin[]>, string>;
export declare const applyRemarkPlugins: Pipeline;
export declare const getSchemaPipeCtx: import("@milkdown/core").Slice<Maybe<UserSchema>, string>;
export declare const typePipeCtx: import("@milkdown/core").Slice<PluginType, "Type">;
export declare const applySchema: Pipeline;
export declare const getCommandsPipeCtx: import("@milkdown/core").Slice<Maybe<(types: PluginType, ctx: Ctx) => CmdTuple[]>, string>;
export declare const createCommands: Pipeline;
export declare const getInputRulesPipeCtx: import("@milkdown/core").Slice<Maybe<(types: PluginType, ctx: Ctx) => InputRule[]>, string>;
export declare const createInputRules: Pipeline;
export declare const shortcutsPipeCtx: import("@milkdown/core").Slice<Record<string, CommandConfig<unknown>>, string>;
export declare const createShortcuts: Pipeline;
export declare const getProsePluginsPipeCtx: import("@milkdown/core").Slice<Maybe<(types: PluginType, ctx: Ctx) => Plugin[]>, string>;
export declare const applyProsePlugins: Pipeline;
export declare const getViewPipeCtx: import("@milkdown/core").Slice<Maybe<(ctx: Ctx) => PluginView>, string>;
export declare const applyView: Pipeline;
export declare const idPipeCtx: import("@milkdown/core").Slice<string, "idPipeCtx">;
export declare const injectPipeEnv: Pipeline;
export {};
//# sourceMappingURL=pieces.d.ts.map