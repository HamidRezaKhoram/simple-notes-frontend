import type { Ctx, MarkSchema } from '@milkdown/core';
import type { MarkType } from '@milkdown/prose/model';
import type { MarkViewConstructor } from '@milkdown/prose/view';
import type { Factory, WithExtend } from '../types';
export interface MarkRest {
    id: string;
    schema: (ctx: Ctx) => MarkSchema;
    view?: (ctx: Ctx) => MarkViewConstructor;
}
export type MarkFactory<SupportedKeys extends string, Options extends {}> = Factory<SupportedKeys, Options, MarkType, MarkRest>;
export type MarkCreator<SupportedKeys extends string, Options extends {}> = WithExtend<SupportedKeys, Options, MarkType, MarkRest>;
export declare const createMark: <SupportedKeys extends string = string, Options extends {} = {}>(factory: MarkFactory<SupportedKeys, Options>) => MarkCreator<string, Options>;
//# sourceMappingURL=create-mark.d.ts.map