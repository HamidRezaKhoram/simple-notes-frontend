import type { Ctx, NodeSchema } from '@milkdown/core';
import type { NodeType } from '@milkdown/prose/model';
import type { NodeViewConstructor } from '@milkdown/prose/view';
import type { Factory, WithExtend } from '../types';
export interface NodeRest {
    id: string;
    schema: (ctx: Ctx) => NodeSchema;
    view?: (ctx: Ctx) => NodeViewConstructor;
}
export type NodeFactory<SupportedKeys extends string, Options extends {}> = Factory<SupportedKeys, Options, NodeType, NodeRest>;
export type NodeCreator<SupportedKeys extends string = string, Options extends {} = {}> = WithExtend<SupportedKeys, Options, NodeType, NodeRest>;
export declare const createNode: <SupportedKeys extends string = string, Options extends {} = {}>(factory: NodeFactory<SupportedKeys, Options>) => NodeCreator<SupportedKeys, Options>;
//# sourceMappingURL=create-node.d.ts.map